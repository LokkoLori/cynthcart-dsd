.pc =$0801 "Basic Upstart Program"
:BasicUpstart($c000)

.import source "utils.asm"

.pc = $c000 "program"

    sei       //disable maskable IRQs

    jsr $e544 //clear char screen

    lda #$7f
    sta $dc0d  //disable timer interrupts which can be generated by the two CIA chips
    sta $dd0d  //the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

    lda $dc0d  //by reading this two registers we negate any pending CIA irqs.
    lda $dd0d  //if we don't do this, a pending CIA irq might occur after we finish setting up our irqmain we don't want that to happen.

    lda #$01   //this is how to tell the VICII to generate a raster interrupt
    sta $d01a

    lda #$00   //this is how to tell at which rasterline we want the irq to be triggered
    sta $d012

    lda #$1b   //as there are more than 256 rasterlines, the topmost bit of $d011 serves as
    sta $d011  //the 8th bit for the rasterline we want our irq to be triggered. here we simply set up a character screen, leaving the topmost bit 0.

    lda #$35 //we turn off the BASIC and KERNAL rom here
    sta $01 //the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of

    :writeAddress($fffe,vicirq)
	
	cli
	
.import source "string.asm"

	lda #$00
	sta sid+24
	
	:initsidchannel(0)
	:initsidchannel(7)
	:initsidchannel(14)

loop:
	
	jsr joyhandling
	:handlestring(qrow, qcol, 12, 0,  38, 0)
	:handlestring(arow, acol, 12, 7,  43, 40)
	:handlestring(zrow, zcol, 12, 14, 48, 80)
	jmp loop
	
readjoystate:
	//saving joystate
	lda #0
	sta $dc02
	lda $dc00
	sta joystate
	sta 1900
	//release joy
	lda #$ff
	sta $dc02
	
	rts
	
joyhandling:

	jsr readjoystate
	lda #$ff
	cmp joystate
	bne joyactive
	jmp joypassive
joyactive:
	lda #0
	cmp joyisactive
	beq joyactivated
	jmp joyhandling_end
	
joyactivated:
	lda #1
	sta joyisactive
	//pop up the volume
	lda #$0F
	sta volume
	sta sid+24
	lda #0
	sta easepos
	jmp joyhandling_end

joypassive:
	lda #0
	cmp joyisactive
	bne joyreleased
	jmp joyhandling_end
	
joyreleased:
	lda #0
	sta joyisactive
	
joyhandling_end:
	rts
	
//---------------------------------------------------------------------------
	
easevolume:
	lda volume
	sta 1801
	cmp #0
	bne volumedown 
	jmp easevolume_end
volumedown:
	lda easepos
	sta 1802
	tax
	lda easetable,x
	sta volume
	sta sid+24
	sta 1803
	cmp #0
	beq easeover
	inc easepos
	sta 1804
	jmp easevolume_end
easeover:
	lda #0
	sta easepos
	
easevolume_end:
	rts

//---------------------------------------------------------------------------
	
	
joystate:
	.byte 0
joyisactive:
	.byte 0
volume:
	.byte 0
free:
	.byte 0
cntr:
	.byte 0
	
vicirq:
	pha  //store registers into stack
    txa
    pha       
    tya
    pha 
	
	lda #$ff //necessary
    sta $d019
	
	inc cntr
	lda cntr
	sta 1800
	
	jsr easevolume
	
	pla  //restore registers from stack
    tay       
    pla 
    tax       
    pla
	
	rti

//        *    @    p    o    i    u    y    t    r    e    w    q
qcol:                     
	.byte $BF, $DF, $DF, $EF, $EF, $F7, $F7, $FB, $FB, $FD, $FD, $7F, 0
qrow:                     
	.byte $02, $40, $02, $40, $02, $40, $02, $40, $02, $40, $02, $40
	

//        =    ; 	:    L    K    J    H    G    F    D    S    A
acol:
	.byte $BF, $BF, $DF, $DF, $EF, $EF, $F7, $F7, $FB, $FB, $FD, $FD, 0
arow:
	.byte $20, $04, $20, $04, $20, $04, $20, $04, $20, $04, $20, $04
	

//        RS   /    .    ,    M    N    B    V    C    X    Z    LS
zcol:
	.byte $BF, $BF, $DF, $DF, $EF, $EF, $F7, $F7, $FB, $FB, $FD, $FD, 0
zrow:
	.byte $10, $80, $10, $80, $10, $80, $10, $80, $10, $80, $10, $80
	
	
	
easetable:
	.byte 15, 13, 12, 11, 10, 9, 9, 8, 8, 8, 8 
	.byte 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
	.byte 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
	.byte 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
	.byte 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
	.byte 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
	.byte 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	.byte 1, 1, 1, 1, 1, 1, 1, 1, 0
		  
easepos:
	.byte 0
	
.import source "freqtable.asm"
	
.print "success"